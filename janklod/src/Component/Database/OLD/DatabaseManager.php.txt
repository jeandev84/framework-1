<?php
namespace Jan\Component\Database;


use Jan\Component\Database\Connection\Connection;
use Jan\Component\Database\Connection\Exception\ConnectionException;
use Jan\Component\Database\Connection\MySQLi\MySQLiConnection;
use Jan\Component\Database\Connection\PDO\MySqlConnection;
use Jan\Component\Database\Connection\PDO\OracleConnection;
use Jan\Component\Database\Connection\PDO\PgsqlConnection;
use Jan\Component\Database\Connection\PDO\SQLiteConnection;
use Jan\Component\Database\Connection\PDO\Support\PDOConnection;
use Jan\Component\Database\Contract\ConnectionInterface;

/**
 * Class DatabaseManager
 * @package Jan\Component\Database
*/
class DatabaseManager
{

     const TYPE_PDO    = 'TYPE_PDO';
     const TYPE_MYSQLI = 'TYPE_MYSQLI';


     /**
      * @var string
     */
     protected $type;



     /**
      * @var Configuration
     */
     protected $config;




     /**
      * @var ConnectionFactory
     */
     protected $factory;



     /**
      * @var mixed
     */
     protected $connection;



     /**
      * Get connection status
      *
      * @var bool
     */
     protected $connected = false;




     /**
      * @var DatabaseManager
     */
     protected static $instance;



     /**
      * DatabaseManager constructor.
      *
      * @param array $configParams
      * @throws ConnectionException
     */
     public function __construct(array $configParams = [])
     {
         if ($configParams) {
             $this->open($configParams);
         }
     }


     /**
      * @param array $configParams
     */
     public function open(array $configParams)
     {
         $this->addConnection($configParams);
     }


     /**
      * @param array $configParams
      * @return DatabaseManager
      * @throws ConnectionException
     */
     public function addConnection(array $configParams): DatabaseManager
     {
        if (! $this->connection) {
            $this->config = new Configuration($configParams);
            $this->type = $this->config->getTypeConnection();
            $this->factory = new ConnectionFactory();
            $this->factory->setConnections(ConnectionStack::getDefaultConnections($this->config));

            if($this->type) {
                $connection = $this->connect($this->type);
                $this->setConnection($connection);
            }

            static::$instance = $this;
        }

        return $this;
     }



     /**
      * @return Configuration
     */
     public function getConfiguration(): Configuration
     {
         return $this->config;
     }



     /**
      * @param string $name
      * @return mixed|null
     */
     public function connect(string $name)
     {
         $this->type = $name;
         return $this->factory->make($name);
     }



     /**
      * @param $connection
      * @return $this
     */
     public function setConnection($connection): DatabaseManager
     {
         if($connection instanceof ConnectionInterface) {
             if ($connection->isConnected()) {
                 $this->setConnectionStatus(true);
             }
         }

         if ($connection instanceof \PDO) {
             $this->setConnectionStatus(true);
         }

         $this->connection = $connection;

         return $this;
     }


     /**
      * @param bool $connected
     */
     public function setConnectionStatus(bool $connected = false)
     {
          $this->connected = $connected;
     }



     /**
      * @return mixed
     */
     public function getConnection()
     {
         return $this->connection;
     }



     /**
      * @return ConnectionInterface|mixed|\PDO
     */
     public function pdo()
     {
        return $this->checkConnection(self::TYPE_PDO);
     }



     /**
      * @return mixed
     */
     public function mysqli()
     {
         return $this->checkConnection(self::TYPE_MYSQLI);
     }



     /**
      * close connection
     */
     public function close()
     {
        if(! $this->connection instanceof ConnectionInterface) {
            $this->connection = null;
        }

        $this->connection->close();
     }


    /**
     * @param string $typeName
     * @return mixed
    */
    protected function checkConnection(string $typeName)
    {
        $connection = $this->getConnection();

        switch ($typeName) {
            case self::TYPE_PDO:
                if (! $connection instanceof PDOConnection){
                    if ($connection instanceof \PDO) {
                        return $connection;
                    }
                }
                return $connection->getConnection();
                break;
            case self::TYPE_MYSQLI:
                if($connection instanceof MySQLiConnection) {
                    return $connection->getConnection();
                }
                break;
        }
    }
}